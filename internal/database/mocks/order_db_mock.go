// Code generated by MockGen. DO NOT EDIT.
// Source: internal/database/database.go
//
// Generated by this command:
//
//	mockgen -source=internal/database/database.go -destination=internal/database/mocks/order_db_mock.go -package=mocks OrderDB
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/deadshvt/nats-streaming-service/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderDB is a mock of OrderDB interface.
type MockOrderDB struct {
	ctrl     *gomock.Controller
	recorder *MockOrderDBMockRecorder
}

// MockOrderDBMockRecorder is the mock recorder for MockOrderDB.
type MockOrderDBMockRecorder struct {
	mock *MockOrderDB
}

// NewMockOrderDB creates a new mock instance.
func NewMockOrderDB(ctrl *gomock.Controller) *MockOrderDB {
	mock := &MockOrderDB{ctrl: ctrl}
	mock.recorder = &MockOrderDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderDB) EXPECT() *MockOrderDBMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockOrderDB) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockOrderDBMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockOrderDB)(nil).Connect))
}

// CreateOrder mocks base method.
func (m *MockOrderDB) CreateOrder(ctx context.Context, order *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderDBMockRecorder) CreateOrder(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderDB)(nil).CreateOrder), ctx, order)
}

// Disconnect mocks base method.
func (m *MockOrderDB) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockOrderDBMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockOrderDB)(nil).Disconnect))
}

// GetAllOrders mocks base method.
func (m *MockOrderDB) GetAllOrders(ctx context.Context) ([]*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", ctx)
	ret0, _ := ret[0].([]*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderDBMockRecorder) GetAllOrders(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderDB)(nil).GetAllOrders), ctx)
}

// GetOrderByID mocks base method.
func (m *MockOrderDB) GetOrderByID(ctx context.Context, id string) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, id)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderDBMockRecorder) GetOrderByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderDB)(nil).GetOrderByID), ctx, id)
}
